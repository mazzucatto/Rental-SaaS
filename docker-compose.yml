version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: rental_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-rental_saas}
      POSTGRES_USER: ${POSTGRES_USER:-rental_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-rental_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - rental_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-rental_user} -d ${POSTGRES_DB:-rental_saas}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: rental_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - rental_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend/rental_api
      dockerfile: Dockerfile
    container_name: rental_backend
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-rental_user}:${POSTGRES_PASSWORD:-rental_password}@postgres:5432/${POSTGRES_DB:-rental_saas}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      
      # Flask
      FLASK_ENV: ${FLASK_ENV:-production}
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-in-production}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-jwt-secret-key-change-in-production}
      
      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:80,http://frontend}
      
      # Email (SMTP)
      MAIL_SERVER: ${MAIL_SERVER:-smtp.gmail.com}
      MAIL_PORT: ${MAIL_PORT:-587}
      MAIL_USE_TLS: ${MAIL_USE_TLS:-true}
      MAIL_USERNAME: ${MAIL_USERNAME:-}
      MAIL_PASSWORD: ${MAIL_PASSWORD:-}
      MAIL_DEFAULT_SENDER: ${MAIL_DEFAULT_SENDER:-noreply@rentalsaas.com}
      
      # File uploads
      UPLOAD_FOLDER: /app/uploads
      MAX_CONTENT_LENGTH: ${MAX_CONTENT_LENGTH:-16777216}
      
      # Timezone
      TZ: ${TZ:-America/Sao_Paulo}
    volumes:
      - backend_uploads:/app/uploads
    ports:
      - "5000:5000"
    networks:
      - rental_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend
  frontend:
    build:
      context: ./frontend/rental-frontend
      dockerfile: Dockerfile
    container_name: rental_frontend
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:5000/api}
    ports:
      - "80:80"
    networks:
      - rental_network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: rental_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "443:443"
      - "8080:80"
    networks:
      - rental_network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    profiles:
      - production

  # Mailhog (Development SMTP server)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: rental_mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - rental_network
    restart: unless-stopped
    profiles:
      - development

  # Adminer (Database management)
  adminer:
    image: adminer:latest
    container_name: rental_adminer
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    ports:
      - "8080:8080"
    networks:
      - rental_network
    depends_on:
      - postgres
    restart: unless-stopped
    profiles:
      - development

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local

networks:
  rental_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

